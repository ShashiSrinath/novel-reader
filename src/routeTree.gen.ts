/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as NovelNovelIdRouteImport } from './routes/novel/$novelId'
import { Route as NovelNovelIdIndexRouteImport } from './routes/novel/$novelId.index'
import { Route as NovelNovelIdChapterIdRouteImport } from './routes/novel/$novelId.$chapterId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NovelNovelIdRoute = NovelNovelIdRouteImport.update({
  id: '/novel/$novelId',
  path: '/novel/$novelId',
  getParentRoute: () => rootRouteImport,
} as any)
const NovelNovelIdIndexRoute = NovelNovelIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => NovelNovelIdRoute,
} as any)
const NovelNovelIdChapterIdRoute = NovelNovelIdChapterIdRouteImport.update({
  id: '/$chapterId',
  path: '/$chapterId',
  getParentRoute: () => NovelNovelIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/novel/$novelId': typeof NovelNovelIdRouteWithChildren
  '/novel/$novelId/$chapterId': typeof NovelNovelIdChapterIdRoute
  '/novel/$novelId/': typeof NovelNovelIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/novel/$novelId/$chapterId': typeof NovelNovelIdChapterIdRoute
  '/novel/$novelId': typeof NovelNovelIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/novel/$novelId': typeof NovelNovelIdRouteWithChildren
  '/novel/$novelId/$chapterId': typeof NovelNovelIdChapterIdRoute
  '/novel/$novelId/': typeof NovelNovelIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/novel/$novelId'
    | '/novel/$novelId/$chapterId'
    | '/novel/$novelId/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/novel/$novelId/$chapterId' | '/novel/$novelId'
  id:
    | '__root__'
    | '/'
    | '/novel/$novelId'
    | '/novel/$novelId/$chapterId'
    | '/novel/$novelId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NovelNovelIdRoute: typeof NovelNovelIdRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/novel/$novelId': {
      id: '/novel/$novelId'
      path: '/novel/$novelId'
      fullPath: '/novel/$novelId'
      preLoaderRoute: typeof NovelNovelIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/novel/$novelId/': {
      id: '/novel/$novelId/'
      path: '/'
      fullPath: '/novel/$novelId/'
      preLoaderRoute: typeof NovelNovelIdIndexRouteImport
      parentRoute: typeof NovelNovelIdRoute
    }
    '/novel/$novelId/$chapterId': {
      id: '/novel/$novelId/$chapterId'
      path: '/$chapterId'
      fullPath: '/novel/$novelId/$chapterId'
      preLoaderRoute: typeof NovelNovelIdChapterIdRouteImport
      parentRoute: typeof NovelNovelIdRoute
    }
  }
}

interface NovelNovelIdRouteChildren {
  NovelNovelIdChapterIdRoute: typeof NovelNovelIdChapterIdRoute
  NovelNovelIdIndexRoute: typeof NovelNovelIdIndexRoute
}

const NovelNovelIdRouteChildren: NovelNovelIdRouteChildren = {
  NovelNovelIdChapterIdRoute: NovelNovelIdChapterIdRoute,
  NovelNovelIdIndexRoute: NovelNovelIdIndexRoute,
}

const NovelNovelIdRouteWithChildren = NovelNovelIdRoute._addFileChildren(
  NovelNovelIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NovelNovelIdRoute: NovelNovelIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
